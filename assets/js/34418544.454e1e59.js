"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[1369],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,d=u["".concat(s,".").concat(m)]||u[m]||f[m]||a;return t?r.createElement(d,l(l({ref:n},p),{},{components:t})):r.createElement(d,l({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3984:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={title:"Using xliff",description:"Recipe - Using xliff | Transloco Angular i18n"},l=void 0,i={unversionedId:"recipes/xliff",id:"recipes/xliff",title:"Using xliff",description:"Recipe - Using xliff | Transloco Angular i18n",source:"@site/docs/recipes/xliff.mdx",sourceDirName:"recipes",slug:"/recipes/xliff",permalink:"/transloco/docs/recipes/xliff",draft:!1,editUrl:"https://github.com/jsverse/transloco/edit/master/docs/docs/recipes/xliff.mdx",tags:[],version:"current",frontMatter:{title:"Using xliff",description:"Recipe - Using xliff | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Prefetch the User Language",permalink:"/transloco/docs/recipes/prefetch"},next:{title:"Generate Locale Files using Google Translate",permalink:"/transloco/docs/recipes/google-translate-integration"}},s={},c=[],p={toc:c};function f(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Install the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/xliff"},(0,o.kt)("inlineCode",{parentName:"a"},"xliff"))," package:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i xliff\nyarn add xliff\n")),(0,o.kt)("p",null,"Replace the default http loader with the following loader implementation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transloco-root.module.ts"',title:'"transloco-root.module.ts"'},"import { HttpClient } from '@angular/common/http';\nimport {\n  TRANSLOCO_LOADER,\n  Translation,\n  TranslocoLoader,\n  TRANSLOCO_CONFIG,\n  translocoConfig,\n  TranslocoModule\n} from '@jsverse/transloco';\nimport { Injectable, isDevMode, NgModule } from '@angular/core';\nimport { from } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n// xliff v1.2\nimport xliff from \"xliff/esm/xliff12ToJs\";\n// xliff v2\n//import xliff from \"xliff/esm/xliff2js\";\n\nfunction toTranslationFormat(json) {\n  const obj = json.resources.transloco;\n  return Object.keys(obj).reduce((acc, key) => {\n    acc[key] = obj[key].target;\n    return acc;\n  }, {});\n}\n\n@Injectable({ providedIn: 'root' })\nexport class TranslocoXliffHttpLoader implements TranslocoLoader {\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string) {\n    return this.http.get<Translation>(`/assets/i18n/${lang}.xlf`, { responseType: 'text' })\n      .pipe(\n        switchMap((translation) => from(xliff(translation))),\n        map(toTranslationFormat)\n      );\n  }\n}\n\n@NgModule({\n  exports: [ TranslocoModule ],\n  providers: [\n    {\n      provide: TRANSLOCO_CONFIG,\n      useValue: translocoConfig({\n        availableLangs: ['en', 'es'],\n        defaultLang: 'en',\n        // Remove this option if your application\n        // doesn't support changing language in runtime.\n        reRenderOnLangChange: true,\n        prodMode: !isDevMode(),\n      })\n    },\n    { provide: TRANSLOCO_LOADER, useClass: TranslocoXliffHttpLoader }\n  ]\n})\nexport class TranslocoRootModule {}\n")),(0,o.kt)("p",null,"The translation file (xliff v1.2):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8" ?>\n<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">\n  <file source-language="en" datatype="plaintext" original="transloco">\n    <body>\n      <trans-unit id="title">\n        <source>Hello Transloco!</source>\n        <target>Bonjour Transloco!</target>\n      </trans-unit>\n    </body>\n  </file>\n</xliff>\n')))}f.isMDXComponent=!0}}]);