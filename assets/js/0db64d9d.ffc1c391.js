"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[4067],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),p=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(g,l(l({ref:t},c),{},{components:n})):o.createElement(g,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6785:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),l=n(4996),s=["components"],i={title:"Scoped Library Extractor",description:"Tools - Scoped Library Extractor | Transloco Angular i18n"},p=void 0,c={unversionedId:"tools/scope-lib-extractor",id:"tools/scope-lib-extractor",title:"Scoped Library Extractor",description:"Tools - Scoped Library Extractor | Transloco Angular i18n",source:"@site/docs/tools/scope-lib-extractor.mdx",sourceDirName:"tools",slug:"/tools/scope-lib-extractor",permalink:"/transloco/docs/tools/scope-lib-extractor",draft:!1,editUrl:"https://github.com/jsverse/transloco/edit/master/docs/docs/tools/scope-lib-extractor.mdx",tags:[],version:"current",frontMatter:{title:"Scoped Library Extractor",description:"Tools - Scoped Library Extractor | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Comments for Translators",permalink:"/transloco/docs/tools/comments"},next:{title:"Message Format",permalink:"/transloco/docs/plugins/message-format"}},u={},d=[{value:"Join Strategies",id:"join-strategies",level:3},{value:"Use the Webpack Plugin",id:"use-the-webpack-plugin",level:3}],m={toc:d};function g(e){var t=e.components,n=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There are cases where we need to use translations in our npm libraries (which is common in a monorepo environment). In these cases, we probably want to have the translation files inside the library's folder and ship them together with it."),(0,a.kt)("p",null,"Unfortunately, we won't be able to load our translation files from the library for two reasons:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"We can't access the application's public directory"),(0,a.kt)("li",{parentName:"ol"},"Webpack dynamic imports don't work with libraries")),(0,a.kt)("p",null,"The only option we've got is to load the library translation files from our application ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," folder."),(0,a.kt)("p",null,"So if we want our translation files to be under the library's folder, we'll need to copy and paste the translation files repeatedly."),(0,a.kt)("p",null,"Well, this is why we've created the Scoped Library Extractor tool, which will do the work for you."),(0,a.kt)("p",null,"For example, here we have created a new CLI project, with the main application (app), and another library with translations (core):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udce6 projects\n \u2523 \ud83d\udcc2 core\n \u2503 \u2523 \ud83d\udcc2 src\n \u2503 \u2503 \u2523 \ud83d\udcc2 lib\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc core.component.ts\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc core.module.ts\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2 i18n\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdc en.json\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdc es.json\n \u2503 \u2503 \u2523 \ud83d\udcdc public-api.ts\n \u2523 \ud83d\udcdc ng-package.json\n \u2523 \ud83d\udcdc package.json\n\ud83d\udce6 src\n \u2523 \ud83d\udcc2 app\n \u2503 \u2523 \ud83d\udcdc app.component.html\n \u2503 \u2523 \ud83d\udcdc app.component.ts\n \u2503 \u2523 \ud83d\udcdc app.module.ts\n \u2503 \u2517 \ud83d\udcdc transloco.loader.ts\n \u2523 \ud83d\udcc2 assets\n \u2503 \u2523 \ud83d\udcc2 i18n\n \u2503 \u2503 \u2523 \ud83d\udcdc en.json\n \u2503 \u2503 \u2517 \ud83d\udcdc es.json\n")),(0,a.kt)("p",null,"Now we need to declare the ",(0,a.kt)("a",{parentName:"p",href:"../lazy-load/scope-configuration"},"scope")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"CoreModule"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="core.module.ts"',title:'"core.module.ts"'},"import {provideTranslocoScope} from \"./transloco.providers\";\n@NgModule({\n  declarations: [CoreComponent],\n  providers: [provideTranslocoScope('core')],\n  imports: [TranslocoModule]\n})\nexport class CoreModule {}\n")),(0,a.kt)("p",null,"Now, we can use the scope in our component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="lib-core.component.html"',title:'"lib-core.component.html"'},"@Component({\n  selector: 'lib-core',\n  template: `\n   <ng-container *transloco=\"let t\">\n     {{ t('core.title') }}\n  </ng-container>\n  `\n})\nexport class CoreComponent {\n}\n")),(0,a.kt)("p",null,"Now, let's install ",(0,a.kt)("inlineCode",{parentName:"p"},"transloco-scoped-libs")," package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install @jsverse/transloco-scoped-libs --save-dev\n")),(0,a.kt)("p",null,"The first thing we need to do is to add i18n configuration with the path to the translation folder in the library's ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="projects/core/package.json"',title:'"projects/core/package.json"'},'{\n  "name": "@app/core",\n  "i18n": [\n    {\n      "scope": "core",\n      "path": "src/lib/i18n"\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"Next, we need to add the library's path into ",(0,a.kt)("inlineCode",{parentName:"p"},"transloco.config.js")," as following (we can also pass ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," package):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="transloco.config.js"',title:'"transloco.config.js"'},"module.exports = {\n  scopedLibs: ['./projects/core/', '@lib/name']\n};\n")),(0,a.kt)("p",null,"If ",(0,a.kt)("strong",{parentName:"p"},"multiple")," destination is needed you could also pass ",(0,a.kt)("inlineCode",{parentName:"p"},"scopedLibs")," as an object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="transloco.config.js"',title:'"transloco.config.js"'},"module.exports = {\n  scopedLibs: [\n    {\n      src: './projects/core',\n      dist: ['./projects/spa/src/assets/i18n', './src/assets/i18n/']\n    }\n  ]\n};\n")),(0,a.kt)("p",null,"Note that the path should refer to the location of the library's ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," file.\nFinally, we need to add the following script to the main ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"scripts": {\n  "transloco:extract-scoped-libs": "transloco-scoped-libs"\n}\n')),(0,a.kt)("p",null,'It also support "watch mode" by passing ',(0,a.kt)("inlineCode",{parentName:"p"},"--watch")," flag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"scripts": {\n  "transloco:extract-scoped-libs": "transloco-scoped-libs --watch"\n}\n')),(0,a.kt)("p",null,"Now, if we run the script, the following things will happen:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The script will extract the translation files from our library and copy them to the main project's translation root folder (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"src/assets/i18n"),").")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"It will add the library's translation files to the ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," ( if you don't want to modify the ",(0,a.kt)("inlineCode",{parentName:"p"},".gitignore")," use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--skip-gitignore")," flag)."))),(0,a.kt)("img",{className:"gif",src:(0,l.Z)("/img/extractor.gif")}),(0,a.kt)("h3",{id:"join-strategies"},"Join Strategies"),(0,a.kt)("p",null,"This tool supports two different strategies. The default option, the one we used above, and ",(0,a.kt)("inlineCode",{parentName:"p"},"join"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"join")," strategy will combine all the translation files into one file under the root translation path for each language (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"en.vendor.json"),")."),(0,a.kt)("p",null,"We can set the strategy in our library's ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="projects/core/package.json"',title:'"projects/core/package.json"'},'{\n  "name": "@app/core",\n  "i18n": [\n    {\n      "scope": "core",\n      "path": "src/lib/i18n",\n      "strategy": "join"\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"Then, we can use it in our application loader:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transloco-loader.ts"',title:'"transloco-loader.ts"'},"@Injectable({ providedIn: 'root' })\nexport class HttpLoader implements TranslocoLoader {\n\n  constructor(private http: HttpClient) {}\n\n  getTranslation(lang: string, { scope }) {\n    const base = this.http.get(`/assets/i18n/${lang}.json`);\n\n    if(scope) {\n      return base;\n    }\n\n    return forkJoin([\n       base,\n       this.http.get(`/assets/i18n/${lang}.vendor.json`)\n    ]).pipe(map(([translation, vendor]) => {\n       return { ...translation, ...vendor }\n    }))\n  }\n}\n\nexport const httpLoader = { provide: TRANSLOCO_LOADER, useClass: HttpLoader };\n")),(0,a.kt)("h3",{id:"use-the-webpack-plugin"},"Use the Webpack Plugin"),(0,a.kt)("p",null,"Add custom Webpack support by using a tool such as ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/manfredsteyer/ngx-build-plus"},"ngx-build-plus"),", and add the plugin to ",(0,a.kt)("inlineCode",{parentName:"p"},"webpack.config")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="webpack.config.js"',title:'"webpack.config.js"'},"const TranslocoScopedLibsWebpackPlugin = require('@jsverse/transloco-scoped-libs/webpack');\n\nmodule.exports = {\n  plugins: [new TranslocoScopedLibsWebpackPlugin()]\n};\n")))}g.isMDXComponent=!0}}]);