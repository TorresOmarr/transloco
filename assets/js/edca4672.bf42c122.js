"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[6577],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7258:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={title:"The Transpiler",description:"The Transpiler | Transloco Angular i18n"},o=void 0,i={unversionedId:"transpiler",id:"transpiler",title:"The Transpiler",description:"The Transpiler | Transloco Angular i18n",source:"@site/docs/transpiler.mdx",sourceDirName:".",slug:"/transpiler",permalink:"/transloco/docs/transpiler",draft:!1,editUrl:"https://github.com/jsverse/transloco/edit/master/docs/docs/transpiler.mdx",tags:[],version:"current",frontMatter:{title:"The Transpiler",description:"The Transpiler | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Loading Template",permalink:"/transloco/docs/loading-template"},next:{title:"Hack The Library",permalink:"/transloco/docs/hack"}},s={},p=[{value:"DefaultTranspiler",id:"defaulttranspiler",level:2},{value:"Functional Transpiler",id:"functional-transpiler",level:2},{value:"Usage",id:"usage",level:3},{value:"Usage Notes",id:"usage-notes",level:3},{value:"Custom Transpiler",id:"custom-transpiler",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The transpiler is responsible for resolving the given value.\nFor example, when given ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello {{ key }}")," the default transpiler will replace the dynamic variable ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," based on the given params, or in some cases, within the ",(0,a.kt)("a",{parentName:"p",href:"./additional-functionality#reference-other-keys"},"translation object itself"),"."),(0,a.kt)("h2",{id:"defaulttranspiler"},"DefaultTranspiler"),(0,a.kt)("p",null,"The default transpiler can be configured with custom interpolation start and end markings to match message parameters."),(0,a.kt)("p",null,"To configure the ",(0,a.kt)("inlineCode",{parentName:"p"},"DefaultTranspiler")," interpolation markings you must provide a Transloco config with the ",(0,a.kt)("a",{parentName:"p",href:"./getting-started/config-options#interpolation"},"interpolation")," property set."),(0,a.kt)("h2",{id:"functional-transpiler"},"Functional Transpiler"),(0,a.kt)("p",null,"In addition to the default transpiler, Transloco also exposes the ",(0,a.kt)("inlineCode",{parentName:"p"},"FunctionalTranspiler")," which allows you to implement function calls into your translation values. This way you can leverage Angular's DI power and make your translations even more flexible."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"FunctionalTranspiler")," is compatible with the ",(0,a.kt)("inlineCode",{parentName:"p"},"DefaultTranspiler"),", therefore you can switch to the functional without worrying that it'll break your current translations."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Switching back to the default transpiler will require you to remove all the functional syntax.")),(0,a.kt)("p",null,"To enable this transpiler, add the following provider in your ",(0,a.kt)("inlineCode",{parentName:"p"},"TranslocoRootModule"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transloco-root.module.ts"',title:'"transloco-root.module.ts"'},"import { FunctionalTranspiler, provideTranslocoTranspiler } from '@jsverse/transloco';\n\n@NgModule({\n  ...\n  providers: [provideTranslocoTranspiler(FunctionalTranspiler)]\n})\nexport class TranslocoRootModule {}\n")),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In order to use a function in the translation, we need to provide it to the transpiler.\nWe do so by creating a new class that implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"TranslocoTranspilerFunction")," interface."),(0,a.kt)("p",null,"For example, let's say we want to display different texts, based on whether the user is exposed to a specific feature or not:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="has-feature-flag.ts"',title:'"has-feature-flag.ts"'},"import { FFService } from './feature-flag.service';\nimport { TranslocoTranspilerFunction } from '@jsverse/transloco';\n\nclass FeatureFlagResolver implements TranslocoTranspilerFunction {\n  constructor(private featureFlagService: FFService) {}\n\n  transpile(...args: string[]): any {\n    const [flagName, trueValue, falseValue] = args;\n\n    return this.featureFlagService.hasFF(flagName) ? trueValue : falseValue;\n  }\n}\n")),(0,a.kt)("p",null,"As you can see, the ",(0,a.kt)("inlineCode",{parentName:"p"},"transpile")," function can accept any number of arguments; you're the one who defines which arguments will be passed. In my case I'm passing three:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The feature flag's name."),(0,a.kt)("li",{parentName:"ul"},"The value I want to present in case the user has the flag."),(0,a.kt)("li",{parentName:"ul"},"The value I want to present in case the user doesn't have the flag.")),(0,a.kt)("p",null,"Now we will add this transpiler function to the ",(0,a.kt)("inlineCode",{parentName:"p"},"TranslocoRootModule")," providers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="transloco-root.module.ts"',title:'"transloco-root.module.ts"'},"import { FunctionalTranspiler, provideTranslocoTranspiler } from '@jsverse/transloco';\nimport { FeatureFlagResolver } from './has-feature-flag';\n\n@NgModule({\n  ...\n  providers: [provideTranslocoTranspiler(FunctionalTranspiler),\n  {\n    provide: 'hasFeatureFlag', // ====> The function name used in the translation\n    useClass: FeatureFlagResolver\n  }],\n})\nexport class TranslocoRootModule {}\n")),(0,a.kt)("p",null,"The functional syntax is very similar to calling a regular function, here is an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="en.json"',title:'"en.json"'},'{\n  "title": "[[ hasFeatureFlag(newDashboards, has flag, missing flag) ]]",\n}\n')),(0,a.kt)("p",null,"In this case, we are checking if the user has the ",(0,a.kt)("inlineCode",{parentName:"p"},"newDashboard")," flag, and in case he does, we want to display ",(0,a.kt)("inlineCode",{parentName:"p"},"'has flag'"),"; otherwise, we will display ",(0,a.kt)("inlineCode",{parentName:"p"},"'missing flag'"),"."),(0,a.kt)("h3",{id:"usage-notes"},"Usage Notes"),(0,a.kt)("p",null,"If the function returns a string that includes the interpolation syntax (",(0,a.kt)("inlineCode",{parentName:"p"},"{{value}}"),"), the transpiler will replace it with the ",(0,a.kt)("inlineCode",{parentName:"p"},"params")," or ",(0,a.kt)("a",{parentName:"p",href:"./additional-functionality#reference-other-keys"},"other keys references")," just like the default transpiler does."),(0,a.kt)("p",null,"If your function param needs to include a comma, you need to escape it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="en.json"',title:'"en.json"'},'{\n  "title": "[[ someFunc(Hello {{user}}\\\\, welcome ,...) ]]",\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"'Hello {{user}}, welcome'")," will be the first param passed."),(0,a.kt)("h2",{id:"custom-transpiler"},"Custom Transpiler"),(0,a.kt)("p",null,"You can also provide a custom transpiler by creating a class that implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"TranslocoTranspiler")," interface."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { TranslocoTranspiler } from '@jsverse/transloco';\n\nexport class CustomTranspiler implements TranslocoTranspiler {\n  transpile(value: any, params, translation: Translation, key: string) {\n    return ...;\n  }\n}\n")))}u.isMDXComponent=!0}}]);