"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[7938],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var s=r.createContext({}),c=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=c(n.components);return r.createElement(s.Provider,{value:e},n.children)},g={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,s=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),p=c(t),f=o,d=p["".concat(s,".").concat(f)]||p[f]||g[f]||a;return t?r.createElement(d,i(i({ref:e},u),{},{components:t})):r.createElement(d,i({ref:e},u))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6449:function(n,e,t){t.r(e),t.d(e,{assets:function(){return g},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=t(4996),l=["components"],s={title:"Generate Locale Files using Google Translate",description:"Recipe - Generate Locale Files using Google Translate | Transloco Angular i18n"},c=void 0,u={unversionedId:"recipes/google-translate-integration",id:"recipes/google-translate-integration",title:"Generate Locale Files using Google Translate",description:"Recipe - Generate Locale Files using Google Translate | Transloco Angular i18n",source:"@site/docs/recipes/google-translate-integration.mdx",sourceDirName:"recipes",slug:"/recipes/google-translate-integration",permalink:"/transloco/docs/recipes/google-translate-integration",draft:!1,editUrl:"https://github.com/jsverse/transloco/edit/master/docs/docs/recipes/google-translate-integration.mdx",tags:[],version:"current",frontMatter:{title:"Generate Locale Files using Google Translate",description:"Recipe - Generate Locale Files using Google Translate | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Using xliff",permalink:"/transloco/docs/recipes/xliff"}},g={},p=[{value:"Steps",id:"steps",level:2},{value:"Expected output:",id:"expected-output",level:2}],f={toc:p};function d(n){var e=n.components,t=(0,o.Z)(n,l);return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Many thanks to ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/born2net"},"born2net")," for sharing this. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jsverse/transloco/issues/261"},"(#261)")),(0,a.kt)("p",null,"The script will  read the en.json translation file and will generate new localized files based on what's defined in the script."),(0,a.kt)("h2",{id:"steps"},"Steps"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Uncomment createLocalFiles() one time to create all the files: he.json, ca.json etc..."),(0,a.kt)("li",{parentName:"ol"},"Comment/Delete createLocalFiles() as you no longer need it"),(0,a.kt)("li",{parentName:"ol"},"Provide your google key via process.env.GOOGLE_KEY"),(0,a.kt)("li",{parentName:"ol"},"Run the script to populate the translations, re-run it whenever you make changes to your en.json")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: this script requires google-translate")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"\n#!/usr/bin/env node\nconst fs = require('fs');\nconst googleTranslate = require('google-translate')(process.env.GOOGLE_KEY);\nconst i18Dir = './src/assets/i18n';\nconst defaultSourceLang = 'en';\nconst codes = {\n    Afrikaans: 'af',\n    Irish: 'ga',\n    Albanian: 'sq',\n    Italian: 'it',\n    Arabic: 'ar',\n    Japanese: 'ja',\n    Azerbaijani: 'az',\n    Kannada: 'kn',\n    Basque: 'eu',\n    Korean: 'ko',\n    Bengali: 'bn',\n    Latin: 'la',\n    Belarusian: 'be',\n    Latvian: 'lv',\n    Bulgarian: 'bg',\n    Lithuanian: 'lt',\n    Catalan: 'ca',\n    Macedonian: 'mk',\n    ChineseSimplified: 'zh-CN',\n    Malay: 'ms',\n    ChineseTraditional: 'zh-TW',\n    Maltese: 'mt',\n    Croatian: 'hr',\n    Norwegian: 'no',\n    Czech: 'cs',\n    Persian: 'fa',\n    Danish: 'da',\n    Polish: 'pl',\n    Dutch: 'nl',\n    Portuguese: 'pt',\n    English: 'en',\n    Romanian: 'ro',\n    Esperanto: 'eo',\n    Russian: 'ru',\n    Estonian: 'et',\n    Serbian: 'sr',\n    Filipino: 'tl',\n    Slovak: 'sk',\n    Finnish: 'fi',\n    Slovenian: 'sl',\n    French: 'fr',\n    Spanish: 'es',\n    Galician: 'gl',\n    Swahili: 'sw',\n    Georgian: 'ka',\n    Swedish: 'sv',\n    German: 'de',\n    Tamil: 'ta',\n    Greek: 'el',\n    Telugu: 'te',\n    Gujarati: 'gu',\n    Thai: 'th',\n    Haitian: 'ht',\n    Turkish: 'tr',\n    Hebrew: 'he',\n    Ukrainian: 'uk',\n    Hindi: 'hi',\n    Urdu: 'ur',\n    Hungarian: 'hu',\n    Vietnamese: 'vi',\n    Icelandic: 'is',\n    Welsh: 'cy',\n    Indonesian: 'id',\n    Yiddish: 'yi'\n};\n\nlet createLocalFiles = () => {\n    Object.values(codes).forEach((local) => {\n        if (local === defaultSourceLang) return;\n        const p = `./src/assets/i18n/${local}.json`;\n        if (fs.existsSync(p)) {\n            console.log('exists ' + p);\n        } else {\n            fs.writeFileSync(p, '', {encoding: 'utf8', flag: 'w'});\n        }\n    });\n};\n\n// createLocalFiles();\n\nlet sourceFile = (local) => {\n    try {\n        return JSON.parse(fs.readFileSync(`./src/assets/i18n/${local}.json`, 'utf8'));\n    } catch (e) {\n        return null;\n    }\n\n};\n\nlet getLocals = () => {\n    return new Promise((resolve, reject) => {\n        const locals = [];\n        fs.readdir(i18Dir, (err, files) => {\n            files.forEach(file => {\n                if (file === `${defaultSourceLang}.json`) return;\n                file = file.replace(/\\.json/, '');\n                locals.push(file);\n            });\n            resolve(locals);\n        });\n    });\n};\n\nlet translate = (word, local) => {\n    return new Promise((resolve, reject) => {\n        googleTranslate.translate(word, local, function (err, translation) {\n            if (translation === undefined) {\n                console.log('>> google error ' + err + ' ' + word + ' ' + local);\n            } else {\n                var translated = cleanProbCharactersV2(translation.translatedText);\n            }\n            resolve(translated);\n        });\n    });\n};\n\nconst cleanProbCharactersV2 = (i_string) => {\n    i_string = i_string.replace(/'/ig, \"\");\n    i_string = i_string.replace(/\"/ig, \"\");\n    i_string = i_string.replace(/}/ig, \"\");\n    i_string = i_string.replace(/{/ig, \"\");\n    i_string = i_string.replace(/\\)/ig, \"\");\n    i_string = i_string.replace(/\\r/ig, \"\");\n    i_string = i_string.replace(/\\n/ig, \"\");\n    i_string = i_string.replace(/()/ig, \"\");\n    return i_string;\n};\n\nconst localSource = sourceFile(defaultSourceLang);\n\n(async function asyncConnect() {\n    try {\n        const languages = await getLocals(3000);\n        for (let i = 0; i < languages.length; i++) {\n            let final = {};\n            const local = languages[i];\n            console.log('processing local ' + local + ' >>>');\n            const destlSource = sourceFile(local);\n            if (destlSource) {\n                final = destlSource;\n            }\n            for (section in localSource) {\n                if (!final[section])\n                    final[section] = {};\n                const words = localSource[section];\n                for (word in words) {\n                    if (destlSource && destlSource[section] && destlSource[section][word]) {\n                        final[section][word] = destlSource[section][word]\n                    } else {\n                        console.log('   >>> ' + section + ' ' + words[word]);\n                        const newWord = await trasnlate(words[word], local);\n                        console.log('       ### translated to ' + newWord);\n                        final[section][word] = newWord;\n                    }\n                }\n            }\n            const f = i18Dir + '/' + local + '.json';\n            try {\n                fs.writeFileSync(f, JSON.stringify(final, null, '\\t'), {encoding: 'utf8', flag: 'w'});\n            } catch (err) {\n                console.error(err);\n            }\n\n        }\n    } catch (err) {\n        console.log('problem encountered ' + err);\n        client.end()\n    }\n})();\n")),(0,a.kt)("h2",{id:"expected-output"},"Expected output:"),(0,a.kt)("img",{class:"gif",src:(0,i.Z)("/img/translation-script-result.png")}))}d.isMDXComponent=!0}}]);